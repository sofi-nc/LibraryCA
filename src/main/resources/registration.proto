syntax = "proto3";

option java_multiple_files = true;
option java_package = "generated.registration";
option java_outer_classname = "RegistrationImpl";

package registration;

// Interface exported by the server.
service RegistrationBook {

	// BINARY STREAM RPC
	//Client chooses an option between registering books that are either being borrowed or returned
	//they send the book's ID and get a confirmation message from the system when they're finished (or when they reach the limit of books)
	//Once the registration is completed, the system sends back a message with a list of the book's information, the reader's information, and the total number of registered books
	rpc bookRegister (stream BookRegistrationRequest) returns (stream BookRegistrationResponse) {}
	
	//UNARY RPC
	//Client sends a reader's ID to register their visit in the system. The system returns a confirmation message.
	rpc visitorRegister (VisitorRegistrationRequest) returns (VisitorRegistrationResponse) {}
}	

	message BookRegistrationRequest {
		int32 bookId = 1;
		int32 userId = 2;
		int32 bookQty = 3;
		int32 total = 4;
		
		enum RegistrationType{
			BORROW = 0;
			RETURN = 1;
		}
		
		RegistrationType registration = 5;
	}
	
	message BookRegistrationResponse {
		string userInfo = 1;
		string bookDetails = 2;
		int32 totalBooks = 3;
		string regType = 4;
		int32 complReg = 5;
		bool reqStatus = 6;
	}
	
	message VisitorRegistrationRequest {
		int32 visitorId = 1;
		string name = 2;
	}
	
	message VisitorRegistrationResponse {
		string registrationConfirmation = 1;
		string registrationDate = 2;
	}

